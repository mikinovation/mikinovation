* コードレビュー
** コードレビューの目的
- チームの技術力のみでは良いプロダクトはできない
- 良いコミュニケーションをかけ合わせることで高品質なプロダクトを生み出す
- コードレビューは難しい。なぜならコードレビューは本質的に批判や批評であるから
- コードレビューとは受け入れ可能なコードの状態を目指して二人三脚でコードを改善していくプロセス
** コードレビューの原則
*** 決めつけない
- ハンロンの剃刀
  - 無能で説明できることに悪意を見出してはならない
- 推測では確認をする
- 対話を通じて理解を深める
*** 客観的根拠に基づく
- 自分の推論や想像である場合は明確に伝える
- エビデンスを添えられているか
*** お互いの前提知識を揃える
*** チームで仕組みを作る
*** 率直さを心がける
* 記事の書き方
** 記事の最初に書くと良いこと
- 記事の目的
- 記事の構成
- 記事のゴール
* Windows
** Windowの切り替えはAlt + Tabですること。デスクトップの切り替え(Ctrl + Window)はしないこと
- もともとデスクトップで切り替えをしていたが、画面共有が不便すぎた
- ウルトラワイドのディスプレイとノートPCの両方で使いやすい
* AI
** Vibe Coding
*** Vibe Codingとは
- Vibe Coding は LLM の助けを借りてコードを書くことではない
- Vibe Coding と言うとき、それは LLM が書いたコードをレビューせずにソフトウェアを構築することを意味する
*** 所感
- やったことないのでなんとも言えない
- 比較的小さいツールやアプリであれば問題ないかもしれない
- 保守系のプロジェクトだと難しそう
- 要件が明確に定義されている複雑なアプリは構築が難しそう
* Nuxt
** useFetch, useAsyncData

*** 破壊的変更

[2025-04-29 Tue 10:47]
最適化された
- https://nuxt.com/blog/v3-17

** NuxtTime

*** ビルトインコンポーネントの追加

[2025-04-29 Tue 10:47]
新たらしくコンポーネントが追加された
- https://nuxt.com/blog/v3-17#nuxttime-a-new-component-for-safe-time-display

** NuxtErrorBoundary

*** 機能の改善

[2025-04-29 Tue 10:47]
- errorとclearErrorが使えるようになった
https://nuxt.com/blog/v3-17#enhanced-nuxterrorboundary

** @nuxt/docs

[2025-04-29 Tue 10:47]
- 公開された
https://nuxt.com/blog/v3-17#documentation-as-a-package

* OrgMode
** ディレクトリの分け方
